@startuml
class fiap.com.example.challenge.service.TaskService {
- TaskRepository taskRepository
+ List<Task> getAllTasks()
+ Task saveTask(Task)
+ List<String> findTop3BySymptomOrDescription(String)
}


class fiap.com.example.challenge.dto.LoginDTO {
- String email
- String password
+ String getPassword()
+ void setPassword(String)
+ String getEmail()
+ void setEmail(String)
}


class fiap.com.example.challenge.ChallengeApplication {
+ {static} void main(String[])
}

class fiap.com.example.challenge.model.Task {
- String number
- LocalDateTime opened
- LocalDateTime updated
- String reportState
- LocalDateTime reportResolved
- String reportCategory
- String reportSubcategory
- String symptom
- String symptomQualification
- String assignmentGroup
- String category
- String assignedTo
- String priority
- LocalDateTime closed
- String requester
- String location
- String description
- String visibleComments1
- String visibleComments2
- String visibleComments3
- String visibleComments4
- String visibleComments5
- String visibleComments6
- String visibleComments7
- String visibleComments8
- String visibleComments9
- String resolution
}

class fiap.com.example.challenge.model.Address {
- UUID addressId
- String street
- String neighborhood
- int number
- String city
- String uf
- String cep
+ UUID getAddressId()
+ void setAddressId(UUID)
+ String getStreet()
+ void setStreet(String)
+ String getNeighborhood()
+ void setNeighborhood(String)
+ int getNumber()
+ void setNumber(int)
+ String getCity()
+ void setCity(String)
+ String getUf()
+ void setUf(String)
+ String getCep()
+ void setCep(String)
}


class fiap.com.example.challenge.service.AuthenticationService {
- EmployeeRepository employeeRepository
+ boolean authenticate(String,String)
}


class fiap.com.example.challenge.model.Employee {
- UUID id
- String firstName
- String lastName
- String email
- String password
- String phone
- LocalDateTime registerDate
- EmployeeFunction employeeFunction
+ UUID getId()
+ LocalDateTime getRegisterDate()
+ String getPhone()
+ void setPhone(String)
+ String getPassword()
+ void setPassword(String)
+ String getEmail()
+ void setEmail(String)
+ String getLastName()
+ void setLastName(String)
+ String getFirstName()
+ void setFirstName(String)
+ EmployeeFunction getEmployeeFunction()
+ void setEmployeeFunction(EmployeeFunction)
}


class fiap.com.example.challenge.service.ApiService {
- RestTemplate restTemplate
+ Address getAddress(String)
- Address mapToAddress(AddressDTO)
}


class fiap.com.example.challenge.controller.AddressController {
- ApiService apiService
- AddressService addressService
+ Address getAddress(String)
+ ResponseEntity<Address> getAddressById(UUID)
+ Address addAddress(Address)
+ List<Address> getAllAddresses()
+ ResponseEntity<Void> deleteAddress(UUID)
+ ResponseEntity<Address> updateAddress(UUID,Address)
}


class fiap.com.example.challenge.dto.AddressDTO {
- String cep
- String street
- String complement
- String unity
- String neighborhood
- String city
- String state
- String ibge
- String gia
- String ddd
- String siafi
+ String getCep()
+ void setCep(String)
+ String getStreet()
+ void setStreet(String)
+ String getComplement()
+ void setComplement(String)
+ String getUnity()
+ void setUnity(String)
+ String getNeighborhood()
+ void setNeighborhood(String)
+ String getCity()
+ void setCity(String)
+ String getState()
+ void setState(String)
+ String getIbge()
+ void setIbge(String)
+ String getGia()
+ void setGia(String)
+ String getDdd()
+ void setDdd(String)
+ String getSiafi()
+ void setSiafi(String)
}


class fiap.com.example.challenge.controller.EmployeeController {
- EmployeeService employeeService
+ ResponseEntity<Employee> getEmployee(UUID)
+ Employee addEmployee(Employee)
+ List<Employee> getAllEmployees()
+ ResponseEntity<Void> deleteEmployee(UUID)
+ ResponseEntity<Employee> updateEmployee(UUID,Employee)
}


interface fiap.com.example.challenge.repository.TaskRepository {
~ List<String> findTop3BySymptomOrDescription(String)
~ List<String> findRandomResolutions()
}

class fiap.com.example.challenge.service.AddressService {
- AddressRepository addressRepository
+ Address getAddressById(UUID)
+ List<Address> getAllAddresses()
+ Address saveAddress(Address)
+ void deleteAddress(UUID)
+ Address updateAddress(UUID,Address)
}


interface fiap.com.example.challenge.repository.AddressRepository {
}
class fiap.com.example.challenge.controller.LoginController {
- AuthenticationService authenticationService
+ ResponseEntity<String> login(LoginDTO)
}


enum fiap.com.example.challenge.model.EmployeeFunction {
+  AMS_LEVEL
+  SERVICE_DESK
}

class fiap.com.example.challenge.controller.HomePageController {
+ String home()
}

interface fiap.com.example.challenge.repository.EmployeeRepository {
~ Optional<Employee> findByEmail(String)
}

class fiap.com.example.challenge.config.DataSourceConfig {
- DataSource dataSource
+ void runDataScriptsAfterStartup()
- void readExcelAndInsertData()
}


class fiap.com.example.challenge.controller.TaskController {
- TaskService taskService
+ List<String> searchTasks(String)
}


class fiap.com.example.challenge.service.EmployeeService {
- EmployeeRepository employeeRepository
+ Employee getEmployeeById(UUID)
+ List<Employee> getAllEmployees()
+ Employee saveEmployee(Employee)
+ void deleteEmployee(UUID)
+ Employee updateEmployee(UUID,Employee)
}


class fiap.com.example.challenge.config.AppConfig {
+ RestTemplate restTemplate()
}



org.springframework.data.jpa.repository.JpaRepository <|-- fiap.com.example.challenge.repository.TaskRepository
org.springframework.data.jpa.repository.JpaRepository <|-- fiap.com.example.challenge.repository.AddressRepository
org.springframework.data.jpa.repository.JpaRepository <|-- fiap.com.example.challenge.repository.EmployeeRepository
@enduml